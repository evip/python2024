1. Giới thiệu Numpy
- Numpy (Numerical Python) là một thư viện cốt lõi trong Python để thực hiện các phép toán số học hiệu quả trên các mảng đa chiều.

- Numpy cung cấp các đối tượng mảng (array) nhanh hơn và linh hoạt hơn so với danh sách (list) trong Python.

- Ứng dụng: Xử lý dữ liệu, tính toán khoa học, machine learning, deep learning.

---------------------------------------------------------------------------------------------------

2. Mảng Numpy
- Mảng Numpy (ndarray) là một cấu trúc dữ liệu chứa các phần tử cùng kiểu dữ liệu.

- Cách tạo mảng:
	import numpy as np
	mang = np.array([1, 2, 3, 4, 5])  # Mảng 1 chiều
	mang_hai_chieu = np.array([[1, 2, 3], [4, 5, 6]])  # Mảng 2 chiều

- Thuộc tính của mảng:
	bien.shape: Kích thước mảng.
	bien.dtype: Kiểu dữ liệu của mảng.
	bien.ndim: Số chiều của mảng.

---------------------------------------------------------------------------------------------------

3. Đánh chỉ mục mảng
Chỉ mục (index) trong NumPy bắt đầu từ 0. Truy cập phần tử của mảng bằng cách gọi ten_mang[chi_muc].
- Truy cập phần tử trong mảng bằng chỉ số:
	mang = np.array([10, 20, 30, 40, 50])
	print(mang[0])  # 10
	print(mang[-1])  # 50

- Đối với mảng 2 chiều:
	mang2d = np.array([[1, 2, 3], [4, 5, 6]])
	print(mang2d[0, 1])  # 2

---------------------------------------------------------------------------------------------------

4. Cắt lát (slicing)
Cắt lát (slicing) là cách lấy một phần tử hoặc tập con của mảng mà không tạo mảng mới độc lập. Cú pháp tương tự list slicing trong Python: ten_mang[start:end:step].

- ví dụ:
mang1D = np.array([10, 20, 30, 40, 50, 60])
# Lấy từ chỉ mục 1 đến 4 (không gồm 4)
print("mang1D[1:4]:", mang1D[1:4])  # [20 30 40]

# Lấy từ chỉ mục 0 đến 5, bước nhảy là 2
print("mang1D[0:5:2]:", mang1D[0:5:2])  # [10 30 50]

mang_2D = np.array([[1,  2,  3],
                   [4,  5,  6],
                   [7,  8,  9],
                   [10, 11, 12]])

# Lấy hàng 1 đến 3 (không gồm 3), và cột 1 đến cuối
print("mang_2D[1:3, 1:]:\n", mang_2D[1:3, 1:])
# [[ 5  6]
#  [ 8  9]]

---------------------------------------------------------------------------------------------------

5. Một số phép toán

arr = np.array([1, 2, 3, 4, 5])
print("arr + 10 =", arr + 10)             # [11 12 13 14 15]
print("arr * 2 =", arr * 2)              # [ 2  4  6  8 10]
print("arr / 2 =", arr / 2)              # [0.5 1.  1.5 2.  2.5]

arr2 = np.array([10, 10, 10, 10, 10])
print("arr + arr2 =", arr + arr2)        # [11 12 13 14 15]

# Một số hàm hữu ích
print("Tổng arr:", np.sum(arr))          # 15
print("Trung bình arr:", np.mean(arr))   # 3.0
print("Max arr:", np.max(arr))           # 5
print("Min arr:", np.min(arr))           # 1
print("Độ lệch chuẩn:", np.std(arr))     # ~1.4142

---------------------------------------------------------------------------------------------------

6. Broadcasting
Broadcasting cho phép NumPy thực hiện phép toán trên các mảng có kích thước khác nhau bằng cách “kéo giãn” (stretch) kích thước tương thích.

Ví dụ:
arr_2d = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])
scalar = 10

# Broadcasting: Mỗi phần tử của arr_2d đều được +10
result = arr_2d + scalar
print("Kết quả cộng mảng 2D với vô hướng:\n", result)
# [[11 12 13]
#  [14 15 16]
#  [17 18 19]]

---------------------------------------------------------------------------------------------------

7. Sắp xếp, tìm kiếm và đếm

- Sắp xếp:
arr = np.array([3, 1, 5, 2, 4])
sorted_arr = np.sort(arr)  # Sắp xếp tăng dần
print("arr sau sort:", sorted_arr)  # [1 2 3 4 5]

arr_2d = np.array([[3, 1],
                   [2, 4]])
# Sắp xếp dọc theo từng hàng (axis=1)
print("Sắp xếp từng hàng:\n", np.sort(arr_2d, axis=1))
# [[1 3]
#  [2 4]]


- Tìm kiếm và đếm:
arr = np.array([10, 20, 30, 20, 50])
# Tìm chỉ mục phần tử có giá trị = 20
print("Các chỉ mục có giá trị = 20:", np.where(arr == 20))  
# (array([1, 3]),)

# Kiểm tra điều kiện
print("Giá trị > 20:", arr[arr > 20])    # [30 50]

# Đếm tần suất
unique_vals, counts = np.unique(arr, return_counts=True)
print("Các giá trị duy nhất:", unique_vals)    # [10 20 30 50]
print("Số lần xuất hiện:", counts)             # [1 2 1 1]

---------------------------------------------------------------------------------------------------

8. Sao chép
- Trong NumPy, có hai loại sao chép: view (shallow copy) và deep copy.
	* View: Dùng slicing hoặc hàm view(), tạo ra mảng mới tham chiếu cùng vùng nhớ với mảng gốc.
	* Deep copy: Dùng hàm copy() để tạo mảng mới hoàn toàn độc lập.

- code:
arr = np.array([1, 2, 3, 4, 5])
view_arr = arr[1:4]  # [2, 3, 4], dùng slicing => view
copy_arr = arr[1:4].copy()  # deep copy

view_arr[0] = 99
print("arr sau khi thay đổi view_arr:", arr)       
# arr = [ 1 99  3  4  5 ]  # Mảng gốc thay đổi

copy_arr[0] = 88
print("arr sau khi thay đổi copy_arr:", arr)       
# arr = [ 1 99  3  4  5 ]  # Mảng gốc không thay đổi

---------------------------------------------------------------------------------------------------

9. NumPy và đại số tuyến tính
- NumPy hỗ trợ nhiều phép toán đại số tuyến tính, bao gồm tích ma trận, định thức, nghịch đảo, giải hệ phương trình. Chủ yếu được triển khai trong module numpy.linalg.

- Tích ma trận:
A = np.array([[1, 2],
              [3, 4]])
B = np.array([[5, 6],
              [7, 8]])

# Phép nhân ma trận
C = np.dot(A, B)
# hoặc C = A.dot(B)
print("Tích ma trận A.B:\n", C)
# [[19 22]
#  [43 50]]

- Một số hàm đại số tuyến tính:
# Định thức
detA = np.linalg.det(A)
print("Định thức của A =", detA)  # -2.0

# Ma trận nghịch đảo
invA = np.linalg.inv(A)
print("Nghịch đảo của A:\n", invA)
# [[-2.   1. ]
#  [ 1.5 -0.5]]

# Giải hệ phương trình tuyến tính
# A.x = b
b = np.array([5, 11])
x = np.linalg.solve(A, b)
print("Nghiệm của hệ A.x = b:", x)  
# [1. 2.]

---------------------------------------------------------------------------------------------------

Kết luận:
- Numpy là công cụ mạnh mẽ và không thể thiếu trong các ứng dụng khoa học dữ liệu và machine learning. 
- Hiểu và sử dụng thành thạo Numpy giúp tối ưu hóa hiệu suất tính toán và xử lý dữ liệu hiệu quả.